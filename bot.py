import asyncio
from aiogram import Bot, Dispatcher, types
import logging
from aiogram.fsm.context import FSMContext
from aiogram import Bot, Dispatcher
from aiogram.types import Message
from aiogram.filters import Command
from aiogram.fsm.state import State, StatesGroup
import requests


def get_food_info(product_name):
    url = f"https://world.openfoodfacts.org/cgi/search.pl?action=process&search_terms={product_name}&json=true"
    response = requests.get(url)
    if response.status_code == 200:
        data = response.json()
        products = data.get('products', [])
        if products:  # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –Ω–∞–π–¥–µ–Ω–Ω—ã–µ –ø—Ä–æ–¥—É–∫—Ç—ã
            first_product = products[0]
            return {
                'name': first_product.get('product_name', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ'),
                'calories': first_product.get('nutriments', {}).get('energy-kcal_100g', 0)
            }
        return None
    print(f"–û—à–∏–±–∫–∞: {response.status_code}")
    return None


class ProfileState(StatesGroup):
    weight = State()
    height = State()
    age = State()
    activity = State()
    city = State()
    calorie_goal = State()


class FoodState(StatesGroup):
    food_calories = State()


bd = {}
token = ""

bot = Bot(token=token)
dp = Dispatcher()

local_bd = {}


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start
@dp.message(Command("start"))
async def cmd_start(message: Message):
    await message.reply("–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å! –Ø –≤–∞—à –±–æ—Ç.")


@dp.message(Command("log_food"))
async def food_start(message: Message, state: FSMContext):
    try:
        print(message)
        product_name = message.text.split()[-1]
        await state.set_state(FoodState.food_calories)
        callories = get_food_info(product_name)['calories']
        await state.update_data(food_calories=callories)
        await message.reply("–£–∫–∞–∂–∏—Ç–µ —Å–∫–æ–ª—å–∫–æ –≥—Ä–∞–º–º –≤—ã —Å—ä–µ–ª–∏?")


    except Exception as e :
        print(e)
        await message.reply("–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑")


@dp.message(FoodState.food_calories)
async def process_weight(message: types.Message, state: FSMContext):
    try:
        gram = float(message.text)
        #print(state.get_data())
        data = await state.get_data()
        data = float(data['food_calories'])
        bd[message.from_user.id]['logged_calories'] += data * gram / 100
        await message.reply(f"–ó–∞–ø–∏—Å–∞–Ω–æ: {data * gram / 100}–∫–∫–∞–ª.")
        await state.clear()
    except ValueError:
        await message.reply("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ. –£–∫–∞–∂–∏—Ç–µ –≥—Ä–∞–º–º–æ–≤–∫–∏ :")


@dp.message(Command('log_water'))
async def cmd_set_profile(message: types.Message):
    try:

        bd[message.from_user.id]['logged_water'] += float(message.text.split()[-1])
        water_norm = bd[message.from_user.id]['water_goal'] - bd[message.from_user.id]['logged_water']

        if water_norm > 0:
            await message.reply(
                f"–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤—ã–ø–∏—Ç–æ–π –≤–æ–¥—ã —É—Å–ø–µ—à–Ω–æ –∑–∞–ø–∏—Å–∞–Ω–æ. –û—Å—Ç–∞–ª–æ—Å—å –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –Ω–æ—Ä–º—ã: {water_norm}.")
        else:
            await message.reply(f"–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤—ã–ø–∏—Ç–æ–π –≤–æ–¥—ã —É—Å–ø–µ—à–Ω–æ –∑–∞–ø–∏—Å–∞–Ω–æ. –ù–æ—Ä–º–∞ –≤–æ–¥—ã –≤—ã–ø–æ–ª–Ω–µ–Ω–∞.")

    except ValueError as e:
        await message.reply("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ. –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤—ã–ø–∏—Ç–æ–π –≤–∞–º–∏ –≤–æ–¥—ã ( –≤ –º–ª) :")


@dp.message(Command('log_workout'))
async def cmd_set_profile(message: types.Message):
    try:
        training = message.text.split()[-2]
        training_time = float(message.text.split()[-1])
        bd[message.from_user.id]['water_goal'] += training_time / 30 * 250
        bd[message.from_user.id]['burned_calories'] += training_time * 10

        await message.reply(
            f"–¢–µ—Ä–Ω–∏—Ä–æ–≤–∞–∫–∞ {training}, –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å—é {training_time} –º–∏–Ω—É—Ç'—ã.–í—ã –ø–æ—Ç—Ä–∞—Ç–∏–ª–∏ {training_time * 10} –∫–∫–∞–ª –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ: –≤—ã–ø–µ–π—Ç–µ {training_time / 30 * 250} –º–ª –≤–æ–¥—ã.")

    except ValueError as e:
        await message.reply("–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑")


@dp.message(Command('check_progress'))
async def check_progress(message: types.Message):
    try:
        bot_answer = f"""üìä –ü—Ä–æ–≥—Ä–µ—Å—Å:
        –í–æ–¥–∞:
        - –í—ã–ø–∏—Ç–æ: {bd[message.from_user.id]['logged_water']}  –º–ª –∏–∑ {bd[message.from_user.id]['water_goal']} –º–ª.
        - –û—Å—Ç–∞–ª–æ—Å—å: {bd[message.from_user.id]['water_goal'] - bd[message.from_user.id]['logged_water']} –º–ª.

        –ö–∞–ª–æ—Ä–∏–∏:
        - –ü–æ—Ç—Ä–µ–±–ª–µ–Ω–æ:
{bd[message.from_user.id]['logged_calories']} –∫–∫–∞–ª –∏–∑ {bd[message.from_user.id]['calorie_goal']} –∫–∫–∞–ª.
        - –°–æ–∂–∂–µ–Ω–æ: {bd[message.from_user.id]['burned_calories']} –∫–∫–∞–ª.
        - –ë–∞–ª–∞–Ω—Å: {bd[message.from_user.id]['calorie_goal'] - bd[message.from_user.id]['logged_calories'] + bd[message.from_user.id]['burned_calories']} –∫–∫–∞–ª."""

        await message.reply(bot_answer)
    except Exception as e:
        await message.reply("–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑")


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /help
@dp.message(Command('set_profile'))
async def cmd_set_profile(message: types.Message, state: FSMContext):
    await message.reply("–í–≤–µ–¥–∏—Ç–µ –≤–∞—à –≤–µ—Å (–≤ –∫–≥):")
    await state.set_state(ProfileState.weight)


@dp.message(ProfileState.weight)
async def process_weight(message: types.Message, state: FSMContext):
    try:
        weight = float(message.text)
        await state.update_data(weight=weight)
        await message.reply("–í–≤–µ–¥–∏—Ç–µ –≤–∞—à —Ä–æ—Å—Ç (–≤ —Å–º):")
        await state.set_state(ProfileState.height)
    except ValueError:
        await message.reply("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ. –í–≤–µ–¥–∏—Ç–µ –≤–∞—à –≤–µ—Å :")


@dp.message(ProfileState.height)
async def process_height(message: types.Message, state: FSMContext):
    try:
        height = float(message.text)
        await state.update_data(height=height)
        await message.reply("–í–≤–µ–¥–∏—Ç–µ –≤–∞—à –≤–æ–∑—Ä–∞—Å—Ç :")
        await state.set_state(ProfileState.age)
    except ValueError:
        await message.reply("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ. –í–≤–µ–¥–∏—Ç–µ –≤–∞—à —Ä–æ—Å—Ç :")


@dp.message(ProfileState.age)
async def process_age(message: types.Message, state: FSMContext):
    try:
        age = float(message.text)
        await state.update_data(age=age)
        await message.reply("–°–∫–æ–ª—å–∫–æ –º–∏–Ω—É—Ç –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ —É –≤–∞—Å –≤ –¥–µ–Ω—å? :")
        await state.set_state(ProfileState.activity)
    except ValueError:
        await message.reply("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ. –í–≤–µ–¥–∏—Ç–µ –≤–∞—à –≤–æ–∑—Ä–∞—Å—Ç :")


@dp.message(ProfileState.activity)
async def process_activity(message: types.Message, state: FSMContext):
    try:
        activity = float(message.text)
        await state.update_data(activity=activity)
        await message.reply("–í –∫–∞–∫–æ–º –≥–æ—Ä–æ–¥–µ –≤—ã –Ω–∞—Ö–æ–¥–∏—Ç–µ—Å—å? :")
        await state.set_state(ProfileState.city)
    except ValueError:
        await message.reply("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ. –°–∫–æ–ª—å–∫–æ –º–∏–Ω—É—Ç –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ —É –≤–∞—Å –≤ –¥–µ–Ω—å? :")


@dp.message(ProfileState.city)
async def process_city(message: Message, state: FSMContext):
    try:
        city = message.text
        await state.update_data(city=city)
        data = await state.get_data()
        bd[message.from_user.id] = data
        bd[message.from_user.id]['calorie_goal'] = bd[message.from_user.id]['weight'] * 10 + 6.25 * \
                                                   bd[message.from_user.id]['height'] - 5 * bd[message.from_user.id][
                                                       'age'] + bd[message.from_user.id]['activity'] * 8
        bd[message.from_user.id]['water_goal'] = bd[message.from_user.id]['weight'] * 20 + 500 * \
                                                 bd[message.from_user.id]['activity'] / 45 + 500
        bd[message.from_user.id]['logged_water'] = 0
        bd[message.from_user.id]['logged_calories'] = 0
        bd[message.from_user.id]['burned_calories'] = 0

        await state.set_state(ProfileState.calorie_goal)
        await message.reply(
            f"–£–∫–∞–∂–∏—Ç–µ –≤–∞—à—É —Ü–µ–ª—å –ø–æ –∫–∫–∞–ª–æ—Ä–∏—è–º, —Ä–µ–∫–æ–º–µ–Ω–¥–æ–≤–∞–Ω–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ - {bd[message.from_user.id]['calorie_goal']}")
    except Exception as e:
        print(e)
        await message.reply("–í –∫–∞–∫–æ–º –≥–æ—Ä–æ–¥–µ –≤—ã –Ω–∞—Ö–æ–¥–∏—Ç–µ—Å—å? :")


@dp.message(ProfileState.calorie_goal)
async def calorie_goal(message: types.Message, state: FSMContext):
    try:
        calorie_goal = float(message.text)
        bd[message.from_user.id]['calorie_goal'] = calorie_goal
        await state.update_data(calorie_goal=calorie_goal)
        await state.clear()
        await message.reply("–†–µ–∑—É–ª—å—Ç–∞—Ç—ã —É—Å–ø–µ—à–Ω–æ –∑–∞–ø–∏—Å–∞–Ω—ã :")
    except ValueError:
        await message.reply(
            f"–£–∫–∞–∂–∏—Ç–µ –≤–∞—à—É —Ü–µ–ª—å –ø–æ –∫–∫–∞–ª–æ—Ä–∏—è–º, —Ä–µ–∫–æ–º–µ–Ω–¥–æ–≤–∞–Ω–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ - {bd[message.from_user.id]['calorie_goal']}")


# –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞
async def main():
    print("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω!")
    await dp.start_polling(bot)


if __name__ == "__main__":
    asyncio.run(main())
